library(raster)
library(gdalUtils)
library(snow)
library(parallel)
library(rgdal)

#set path to harmonic regression coeffients (downloaded from GEE)
setwd("D:/path/to/harmonic/regression/coefficients")



#merge harmonic regression coeffiencts to file
files <- list.files(pattern = ".tif$")
gdalwarp(srcfile = files, dstfile = paste0("Harmonics_coeffs_Kilimanjaro.tif"))

#set path to time series data (downloaded from GEE - one file per month)
setwd("D:/path/to/timeseries/data")

#merge time series per year --> one layer stack per year
for(y in c(2016:2019)){
#for(y in c(2018:2019)){
   files <- list.files(pattern = glob2rx(paste0("*Time_series_", y, "*.tif$")))
   #gdalwarp(srcfile = files, dstfile = paste0("Time_series_", y, "_merged.tif"))
   for (f in files){
     if (f == files[1]){
       ndvi_stack <- brick(f)
     }else{
       ndvi_stack <- stack(ndvi_stack, brick(f))
     }
   }
   writeRaster(ndvi_stack, paste0("Time_series_", y, "_merged.tif"))
}


# stack all years together
files <- list.files(pattern = glob2rx("Time_series_*_merged.tif$"))
for(f in 1:length(files)){
  if(f == 1){
    ndvi_stack <- brick(files[f])
  }else{
    ndvi_stack <- stack(ndvi_stack, brick(files[f]))
  }
}



###############Time series mean and standard deviation ##############

# calculate time sereis mean and standard deviation
# select subset of NDVI stack if necessary (i.e. only subset of total time period)
# ndvi_stack <- ndvi_stack[[35:176]]
ndvi_mean <- calc(x = ndvi_stack, fun = mean, na.rm = TRUE)
ndvi_std <- calc(x = ndvi_stack, fun = sd, na.rm = TRUE)
writeRaster(ndvi_mean, "NDVI_mean.tif")
writeRaster(ndvi_std, "NDVI_stddev.tif")


# alternative: use parallel processing for calculation
# mean_function <- function(x){calc(x, mean, na.rm = TRUE)}
# sd_function <- function(x){calc(x, sd, na.rm = TRUE)}


# Sys.time()
# beginCluster(n = 6)
# cl <- getCluster()
#clusterExport(cl, list("layers", "all_days", "all_acq_dates"))
# m <- clusterR(ndvi_stack,calc, args = list(fun = mean))
# endCluster()
# Sys.time()
# writeRaster(m, "NDVI_mean.tif")

# Sys.time()
# beginCluster(n = 6)
# cl <- getCluster()
#clusterExport(cl, list("layers", "all_days", "all_acq_dates"))
# std <- clusterR(ndvi_stack,sd_function)
# endCluster()
# Sys.time()
# writeRaster(std, "NDVI_stddev.tif")