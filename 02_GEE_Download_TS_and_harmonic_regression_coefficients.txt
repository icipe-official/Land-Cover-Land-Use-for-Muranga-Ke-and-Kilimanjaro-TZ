// Set the region of interest to a point.

//roi for tansania
//var roi = ee.Geometry.Rectangle(36.85, -3.7, 37.76, -2.81);

//roi for kenya
var roi = ee.Geometry.Rectangle(36.7, -1.2, 37.5, -0.6);


//Set the time range
var start = ee.Date('2016-07-01');
var end = ee.Date('2019-07-01');
var startyr = start.get("year");
var endyr = end.get("year");
var years = ee.List.sequence(startyr,endyr);

// Create list of dates for time series
var n_days = ee.Date('2019-07-01').difference(ee.Date('2016-07-03'),'day').round();
var dates = ee.List.sequence(0,n_days,5);
var make_datelist = function(n) {
  return ee.Date('2016-07-03').advance(n,'day').format("YYYY-MM-dd")
}
dates = dates.map(make_datelist);
print(dates)

// Set the number of cycles per year to model.
var harmonics = 3;

// Outline and center aoi on the map.
var sfLayer = ui.Map.Layer(roi, {color: 'FF0000'}, 'roi');
Map.layers().add(sfLayer);
var shpLayer = ui.Map.Layer(table3, {color: "FF0000"}, "shp");
Map.layers().add(shpLayer);
                            
// Function to mask clouds using the Sentinel-2 QA band.
function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0).and(
            qa.bitwiseAnd(cirrusBitMask).eq(0));

  // Return the masked and scaled data, without the QA bands.
  return image.updateMask(mask).divide(10000)
      .select("B.*")
      .copyProperties(image, ["system:time_start"]);
}

function get_date(image){
  var date = ee.Date(image.get("system:time_start")).format("YYYY-MM-dd");
  return image.set("day", date);
}

// Load a collection of Landsat TOA reflectance images.
var s2_collection = ee.ImageCollection('COPERNICUS/S2')
    .filterDate(start,end)
    .filterBounds(roi)
    // Pre-filter to get less cloudy granules.
    //.filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
    .map(maskS2clouds)
    .map(get_date);

print(s2_collection);
//Map.addLayer(s2_collection.first(), {}, "first_img")

var s2_collection = s2_collection.filter(ee.Filter.inList("day", dates));
print(s2_collection)


// The dependent variable we are modeling.
var dependent = 'NDVI';

// Make a list of harmonic frequencies to model.
// These also serve as band name suffixes.
var harmonicFrequencies = ee.List.sequence(1, harmonics);
//print(harmonicFrequencies)

// Function to get a sequence of band names for harmonic terms.
var constructBandNames = function(base, list) {
  return ee.List(list).map(function(i) {
    return ee.String(base).cat(ee.Number(i).int());
  });
};

// Construct lists of names for the harmonic terms.
var cosNames = constructBandNames('cos_', harmonicFrequencies);
var sinNames = constructBandNames('sin_', harmonicFrequencies);

//print(cosNames, sinNames)

// Independent variables.
var independents = ee.List(['constant'])
  .cat(cosNames).cat(sinNames);
//print(independents)

// Function to add an NDVI band, the dependent variable.
var addNDVI = function(image) {
  return image
    .addBands(image.normalizedDifference(['B8', 'B4'])
    .rename('NDVI'))
    .float();
};

// Function to add a time band.
var addDependents = function(image) {
  // Compute time in fractional years since the epoch.
  var years = image.date().difference(start, 'year');
  var timeRadians = ee.Image(years.multiply(2 * Math.PI)).rename('t');
  var constant = ee.Image(1);
  return image.addBands(constant).addBands(timeRadians.float());
};

// Function to compute the specified number of harmonics
// and add them as bands.  Assumes the time band is present.
var addHarmonics = function(freqs) {
  return function(image) {
    // Make an image of frequencies.
    var frequencies = ee.Image.constant(freqs);
    // This band should represent time in radians.
    var time = ee.Image(image).select('t');
    // Get the cosine terms.
    var cosines = time.multiply(frequencies).cos().rename(cosNames);
    // Get the sin terms.
    var sines = time.multiply(frequencies).sin().rename(sinNames);
    return image.addBands(cosines).addBands(sines);
  };
};

// Filter to the area of interest, add variables.
var harmonic_s2 = s2_collection
  .filterBounds(roi)
  .map(addNDVI)
  .map(addDependents)
  .map(addHarmonics(harmonicFrequencies));
  
//print(harmonic_s2)


// The output of the regression reduction is a 4x1 array image.
var harmonicTrend = harmonic_s2
  .select(independents.add(dependent))
  .reduce(ee.Reducer.linearRegression(independents.length(), 1));
  
//print(harmonicTrend)

// Turn the array image into a multi-band image of coefficients.
var harmonicTrendCoefficients = harmonicTrend.select('coefficients')
  .arrayProject([0])
  .arrayFlatten([independents]);
//print(harmonicTrendCoefficients)

//Map.addLayer(ee.Image(harmonicTrendCoefficients), {bands: ["cos_1", "cos_2", "cos_3"]}, "cos_1")
//Map.addLayer(ee.Image(harmonicTrendCoefficients), {bands: ["t"]}, "time_trend")

// Compute fitted values.
var fittedHarmonic = harmonic_s2.map(function(image) {
  return image.addBands(
    image.select(independents)
      .multiply(harmonicTrendCoefficients)
      .reduce('sum')
      .rename('fitted'));
});
//print(fittedHarmonic)


// Plot the fitted model and the original data at the ROI.
print(ui.Chart.image.series(fittedHarmonic.select(['fitted','NDVI']), point, ee.Reducer.mean(), 30)
    .setOptions({
      title: 'Harmonic model: original and fitted values',
      lineWidth: 1,
      pointSize: 3,
}));

//Map.addLayer(fittedHarmonic.select(["NDVI", "fitted", "t"]), {}, "RGB")
Map.addLayer(fittedHarmonic.select(["NDVI", "fitted"]), {}, "RGB")
//Map.addLayer(fittedHarmonic, {bands: "NDVI"}, "NDVI")


//Create a mosaic of all tiles for each sensing date
// Difference in days between start and finish
var diff = end.difference(start, 'day')

// Make a list of all dates
var range = ee.List.sequence(0, diff.subtract(1)).map(function(day){return start.advance(day,'day')})
print(range)


// Function for iteraton over the range of dates
var day_mosaics = function(imgCollection) {
  var build_mosaic = function(date){
    date = ee.Date(date)
    // Filter collection between date and the next day
    var filtered = ee.ImageCollection(imgCollection.filterDate(date, date.advance(1,'day')))
  
    // Make the mosaic
    var image = ee.Image(filtered.mosaic())
                .set("date", date)
                //.set("system:index", ee.String(date.difference(start, "day").int()))
                .set("system:index", date.format("YYYY-MM-dd").replace("-","", "g"))
                .copyProperties(filtered.first(), ['system:time_start']);
  
    // Return the mosaic only if the collection has images
    return ee.Algorithms.If(filtered.size().gte(1), image)
  }
  return build_mosaic
}

// Iterate over the range to make a new list, and then cast the list to an imagecollection
var fittedHarmonic_mosaic = ee.ImageCollection(ee.List(range.map(day_mosaics(fittedHarmonic)).flatten()))
print(fittedHarmonic_mosaic)

Map.addLayer(fittedHarmonic,{}, "mosaic")

//Create a raster stack with the time series NDVI data
var export_ndvi = fittedHarmonic_mosaic.select("NDVI").toBands()
                      .clip(roi)
//print(export_ndvi)
//Map.addLayer(export_ndvi, {}, "NDVI")


// Export NDVI time-series data to Drive: one multi-layer tiff for each month

for (var y= startyr.getInfo(); y <= endyr.getInfo(); y = y + 1) {
  for(var m=1; m <= 12; m = m+1){
    var name0 = "00" + m.toString();
    var name = ee.String(name0).slice(ee.Number(ee.String(name0).length()).subtract(2), ee.Number(ee.String(name0).length()));
    //print("NDVI_Time_series"+y.toString())
    Export.image.toDrive({image: fittedHarmonic_mosaic.filter(ee.Filter.calendarRange(y,y,"year"))
                                                    .filter(ee.Filter.calendarRange(m,m, "month"))
                                                    .select("NDVI").toBands().clip(roi),
    description: "NDVI_Time_series_"+y.toString()+"_"+name.getInfo(), scale: 10,region: roi ,
    crs: "EPSG:32737",
    maxPixels: 31000000000
    });
  }
}


function ymdList(imgcol){
    var iter_func = function(image, newlist){
        var date = ee.Number.parse(image.date().format("YYYYMMdd"));
        var timeRad = image.select("t").reduceRegion({reducer: ee.Reducer.mean(), geometry: point,
          crs: "EPSG:32737", 
          scale: 10}).get("t")
        newlist = ee.List(newlist);
        return ee.List(newlist.add( ee.Dictionary({date: date, timeRad: timeRad}))//.sort()
                )
    };
    return imgcol.iterate(iter_func, ee.List([]));
}
//print(ymdList(fittedHarmonic_mosaic))

var datelist = ymdList(fittedHarmonic_mosaic)
//print(datelist)


var asList = ee.List(datelist).map(function (value) {
  var dict = ee.Dictionary(value);
  var date = dict.get("date")
  var timeRad = dict.get("timeRad")
  return ee.Feature(null, {"date": date,"timeRad": timeRad });
});
//print(asList)

var fc = ee.FeatureCollection(asList)
print(fc)

//export list with all dates (layers) to csv
Export.table.toDrive({collection:fc, description: "layernames", fileFormat: "CSV"});



//Export.image.toDrive({image: export_ndvi,description: 'NDVI_Time_series', scale: 10,region: roi,
//maxPixels: 31000000000
//});

//Create a raster stack with the fitted NDVI time series
var export_fitted = fittedHarmonic_mosaic.select(["fitted"]).toBands()
//print(export_fitted)



//Calculate amplitude and phase from the regression coefficients
var amplitude_names = constructBandNames('amp_', harmonicFrequencies);
var phase_names = constructBandNames("phase_", harmonicFrequencies);


var calculateCoeffs = function(img, freqs, cosNames, sinNames, ampNames, phaseNames){
  var phase = img.select(cosNames).atan2(
    img.select(sinNames))
    .rename(phaseNames);
  var amplitude = img.select(cosNames).hypot(
    img.select(sinNames))
    .rename(ampNames);
  return img.select(["constant"]).addBands(phase.addBands(amplitude));
};

var coeffs = calculateCoeffs(harmonicTrendCoefficients, harmonicFrequencies,
              cosNames, sinNames, amplitude_names, phase_names)

//Export harmonic regression coefficents
//print(coeffs)
//Map.addLayer(coeffs, {bands: ["phase_1", "phase_2", "amp_1"]}, "phase_RGB")
Export.image.toDrive({image: coeffs,description: 'Harmonics_coeffs', scale: 10,region: roi,
crs: "EPSG:32737",
maxPixels: 1e10, 
});
